name: Continuous Integration and Delivery

on: [push]

env:
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/summarizer

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${{ secrets.CR_PAT }} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
         CR_PAT: ${{ secrets.CR_PAT }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./yts/Dockerfile.prod \
            "./yts"
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
         GITHUB_TOKEN: ${{ secrets.CR_PAT }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./yts/Dockerfile.prod \
            "./yts"
      - name: Run container
        run: |
          docker run \
            -d \
            --name yts \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest
      - name: Pytest
        run: docker exec yts python -m pytest . -k "ping"
      - name: Flake8
        run: docker exec yts python -m flake8 .
      - name: Black
        run: docker exec yts python -m black . --check
      - name: isort
        run: docker exec yts python -m isort . --check-only

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Set SSH
        run: |
              eval $(ssh-agent -s)
              echo ${{ secrets.SSH_PRIVATE_KEY }} | ssh-add -
              mkdir -p ~/.ssh
              chmod 700 ~/.ssh
              ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
              chmod 644 ~/.ssh/known_hosts

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
                  pwd
                  ls -alh


      # - name: Log in to GitHub Packages
      #   run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
      #   env:
      #    GITHUB_TOKEN: ${{ secrets.CR_PAT }}
      # - name: Pull image
      #   run: |
      #     docker pull ${{ env.IMAGE }}:latest || true
      # - name: Run container
      #   run: |
      #     docker run \
      #       -d \
      #       --name yts \
      #       -e PORT=8765 \
      #       -e ENVIRONMENT=dev \
      #       -e DATABASE_URL=sqlite://sqlite.db \
      #       -e DATABASE_TEST_URL=sqlite://sqlite.db \
      #       -p 5003:8765 \
      #       ${{ env.IMAGE }}:latest
